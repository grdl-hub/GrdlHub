/**
 * Page Scanner - Automatically detect and configure pages
 * Stores page configurations in homeSections collection under _pageDefinitions document
 */

import { doc, setDoc, getDoc } from 'firebase/firestore'
import { db } from '../auth.js'

/**
 * Scan pages directory and generate page definitions
 */
export async function scanAndUpdatePages() {
  try {
    console.log('üîç Scanning pages directory...')
    
    // Get list of page files from the pages directory
    const pageFiles = await getPageFiles()
    
    // Generate page definitions
    const availablePages = generatePageDefinitions(pageFiles)
    
    // Update both homeSections and accessControl configurations
    await updatePageConfigurations(availablePages)
    
    console.log('‚úÖ Pages automatically updated!')
    return availablePages
    
  } catch (error) {
    console.error('‚ùå Error scanning pages:', error)
    throw error
  }
}

/**
 * Get page files from the pages directory
 * Note: In a browser environment, we'll maintain a static list that gets updated
 */
function getPageFiles() {
  // Static list of known page files - this would be updated when new pages are added
  return [
    'home.js',
    'appointments.js', 
    'availability.js',
    'availability-tracker.js',
    'availability-forms.js',
    'reports.js',
    'userReports.js',
    'users.js',
    'pages.js',
    'templates.js',
    'content.js',
    'settings.js',
    'translations.js',
    'simple-translations.js',
    'admin.js',
    'preApprovedEmails.js'
  ]
}

/**
 * Generate page definitions from file names
 */
function generatePageDefinitions(pageFiles) {
  const pageDefinitions = []
  const pageMap = {}
  
  pageFiles.forEach(file => {
    const pageId = file.replace('.js', '')
    const pageInfo = generatePageInfo(pageId)
    
    pageDefinitions.push({
      id: pageId,
      name: pageInfo.name,
      icon: pageInfo.icon
    })
    
    pageMap[pageId] = {
      name: pageInfo.name,
      icon: pageInfo.icon,
      description: pageInfo.description
    }
  })
  
  return { pageDefinitions, pageMap }
}

/**
 * Generate page information from page ID
 */
function generatePageInfo(pageId) {
  const pageInfoMap = {
    'home': { name: 'Home', icon: 'üè†', description: 'Dashboard and overview' },
    'appointments': { name: 'Appointments', icon: 'üìÖ', description: 'Recurring appointments and scheduling' },
    'availability': { name: 'Availability', icon: 'üìã', description: 'Mark availability for appointments' },
    'availability-tracker': { name: 'Availability Tracker', icon: 'üìÖ', description: 'Track availability submissions' },
    'availability-forms': { name: 'Availability Forms', icon: 'üìù', description: 'Submit availability for appointments' },
    'reports': { name: 'Reports', icon: 'üìä', description: 'Generate detailed reports and analytics (Admin only)' },
    'userReports': { name: 'User Reports', icon: 'üìä', description: 'Generate user-specific reports' },
    'users': { name: 'Users', icon: 'üë•', description: 'User management' },
    'pages': { name: 'Pages', icon: 'üìÑ', description: 'Static page management' },
    'templates': { name: 'Templates', icon: 'üìÑ', description: 'Template management' },
    'content': { name: 'Content', icon: 'üìù', description: 'Dynamic content management' },
    'settings': { name: 'Settings', icon: '‚öôÔ∏è', description: 'App configuration' },
    'translations': { name: 'Translations', icon: 'üåç', description: 'Interface translation management (Admin only)' },
    'simple-translations': { name: 'Simple Translations', icon: 'üåê', description: 'Simplified translation interface' },
    'admin': { name: 'Admin', icon: 'üëë', description: 'Admin panel and controls (Admin only)' },
    'preApprovedEmails': { name: 'Pre-approved Emails', icon: 'üìß', description: 'Email approval management (Admin only)' }
  }
  
  // If page is not in the map, generate from ID
  if (pageInfoMap[pageId]) {
    return pageInfoMap[pageId]
  }
  
  // Auto-generate for new pages
  const name = pageId
    .split('-')
    .map(word => word.charAt(0).toUpperCase() + word.slice(1))
    .join(' ')
    
  return {
    name: name,
    icon: 'üìÑ', // Default icon
    description: `${name} page functionality`
  }
}

/**
 * Update page configurations in Firestore using existing homeSections collection
 */
async function updatePageConfigurations(availablePages) {
  try {
    // Store the page configuration in homeSections collection as a special document
    const configDoc = doc(db, 'homeSections', '_pageDefinitions')
    await setDoc(configDoc, {
      pages: availablePages.pageDefinitions,
      pageMap: availablePages.pageMap,
      lastUpdated: new Date(),
      autoGenerated: true,
      isSystemConfig: true // Mark this as a system configuration document
    })
    
    console.log('üìù Page configurations updated in homeSections collection')
  } catch (error) {
    console.error('‚ùå Error updating page configurations:', error)
    throw error
  }
}

/**
 * Load page configurations from Firestore using existing homeSections collection
 */
export async function loadPageConfigurations() {
  try {
    const configDoc = doc(db, 'homeSections', '_pageDefinitions')
    const docSnap = await getDoc(configDoc)
    
    if (docSnap.exists()) {
      const data = docSnap.data()
      console.log('üìö Loaded page configurations from homeSections collection')
      return {
        pages: data.pages || [],
        pageMap: data.pageMap || {},
        lastUpdated: data.lastUpdated
      }
    } else {
      console.log('üìö No page configurations found, using defaults')
      return null
    }
  } catch (error) {
    console.error('‚ùå Error loading page configurations:', error)
    return null
  }
}

/**
 * Initialize automatic page scanning
 */
export async function initializePageScanner() {
  try {
    console.log('üöÄ Initializing automatic page scanner...')
    
    // Check if we need to update page configurations
    const existing = await loadPageConfigurations()
    
    if (!existing || !existing.lastUpdated) {
      console.log('üîÑ Running initial page scan...')
      await scanAndUpdatePages()
    } else {
      console.log('‚úÖ Page configurations up to date')
    }
    
  } catch (error) {
    console.error('‚ùå Error initializing page scanner:', error)
  }
}

/**
 * Manual trigger for page scanning (for settings page)
 */
export async function triggerPageScan() {
  try {
    console.log('üîÑ Manually triggering page scan...')
    const result = await scanAndUpdatePages()
    
    // Trigger page reload to update UI
    if (typeof window !== 'undefined') {
      setTimeout(() => {
        window.location.reload()
      }, 1000)
    }
    
    return result
  } catch (error) {
    console.error('‚ùå Error in manual page scan:', error)
    throw error
  }
}