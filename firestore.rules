rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is admin
    function isAdmin(userId) {
      return exists(/databases/$(database)/documents/users/$(userId)) &&
             get(/databases/$(database)/documents/users/$(userId)).data.role == 'admin';
    }
    
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user owns the document
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Users collection - allow public read for email checking during auth
    match /users/{userId} {
      allow read: if true; // Allow anyone to read for email verification during signup
      allow write: if true; // Temporarily allow all writes for setup
      allow create: if true; // Temporarily allow all creates for setup
    }
    
    // Pre-approved emails collection - allow read for auth check, admin only for write
    match /preApprovedEmails/{emailId} {
      allow read: if true; // Allow anyone to read for email verification during signup
      allow write: if isAuthenticated() && isAdmin(request.auth.uid);
    }
    
    // Pages collection - role-based access
    match /pages/{pageId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && isAdmin(request.auth.uid);
    }
    
    // Content collection - role-based access
    match /content/{contentId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && isAdmin(request.auth.uid);
    }
    
    // Settings collection - admin only
    match /settings/{settingId} {
      allow read, write: if isAuthenticated() && isAdmin(request.auth.uid);
    }
  }
}
