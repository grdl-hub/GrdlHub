rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Users collection - only authenticated users can read/write their own data
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      // Allow admins to read all users
      allow read: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      // Allow admins to write all users
      allow write: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      
      // Allow unauthenticated read for email checking during authentication
      // This is needed for the invite system to check if emails exist
      allow read: if true;
    }
    
    // Appointments collection - authenticated users can create/read/update/delete their own appointments
    match /appointments/{appointmentId} {
      // Allow read/write if user is authenticated and owns the appointment
      allow read, write: if request.auth != null && 
        (resource == null || resource.data.createdBy == request.auth.uid);
      
      // Allow admins to read/write all appointments
      allow read, write: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      
      // Ensure createdBy field is set to current user on create
      allow create: if request.auth != null && 
        request.resource.data.createdBy == request.auth.uid;
    }
    
    // Appointment titles collection - authenticated users can read, only admins can write
    match /appointmentTitles/{titleId} {
      // All authenticated users can read appointment titles
      allow read: if request.auth != null;
      
      // Only admins can create/update/delete appointment titles
      allow write: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      
      // Allow system initialization (for creating default titles)
      allow create: if request.auth != null && 
        (request.resource.data.createdBy == 'system' || 
         (request.resource.data.createdBy == request.auth.uid &&
          request.resource.data.updatedBy == request.auth.uid));
      
      // Allow updates by admins or for system documents
      allow update: if request.auth != null && 
        (resource.data.createdBy == 'system' ||
         (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin' &&
          request.resource.data.updatedBy == request.auth.uid));
    }
    
    // Privileges collection - authenticated users can read, only admins can write
    match /privileges/{privilegeId} {
      // All authenticated users can read privileges
      allow read: if request.auth != null;
      
      // Only admins can create/update/delete privileges
      allow write: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      
      // Allow system initialization (for creating default privileges)
      allow create: if request.auth != null && 
        (request.resource.data.createdBy == 'system' || 
         (request.resource.data.createdBy == request.auth.uid &&
          request.resource.data.updatedBy == request.auth.uid));
      
      // Allow updates by admins or for system documents
      allow update: if request.auth != null && 
        (resource.data.createdBy == 'system' ||
         (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin' &&
          request.resource.data.updatedBy == request.auth.uid));
    }
    
    // Pages collection (if you have static pages)
    match /pages/{pageId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Content collection (if you have dynamic content)
    match /content/{contentId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null;
    }
    
    // Availabilities collection - users can manage their own availability
    match /availabilities/{availabilityId} {
      // Users can read/write their own availability
      allow read, write: if request.auth != null && 
        resource.data.userId == request.auth.uid;
      
      // Allow create if the userId matches the authenticated user
      allow create: if request.auth != null && 
        request.resource.data.userId == request.auth.uid;
      
      // Admins can read all availabilities (for assigning designations)
      allow read: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Month Submissions collection - users can manage their own month submissions
    match /monthSubmissions/{submissionId} {
      // Users can read/write their own month submissions
      allow read, write: if request.auth != null && 
        resource.data.userId == request.auth.uid;
      
      // Allow create if the userId matches the authenticated user
      allow create: if request.auth != null && 
        request.resource.data.userId == request.auth.uid;
      
      // Admins can read all month submissions (to see who has/hasn't submitted)
      allow read: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      
      // Admins can write (to unlock submissions if needed)
      allow write: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
  }
}